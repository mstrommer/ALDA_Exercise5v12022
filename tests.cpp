// Test definitions. Do NOT edit this file!

#include <tuple>

//#define CATCH_CONFIG_MAIN // defines main() automatically
#include "lib/catch.hpp"
#include "hashtable.hpp"
#include <string.h>
#include <stdio.h>

int hasDuplicatesInList(hashtable *ht, char *key){
    int hash = ht_hash(ht, key);
    list *lst = ht->buckets[hash];
    int count = 0;
    element *tmp = lst->head;
    while(tmp){
        if(strcmp(key, tmp->icao_code) == 0){
            count++;
        }
        tmp = tmp->next;
    }
    return count > 1 ? 1 : 0;
}

// =====================
// HastTable Testcases
// ---------------------

TEST_CASE("Test1", "hash1")
{
    hashtable *ht = ht_init(100);
    int result = readFile(ht, "stations.csv");
    INFO("Testing if the file can be opened.");
    REQUIRE(result != 1);
    INFO("File can be opened. Testing the hash function fails because all is put into bucket 0");
    int flag = 0;
    for(int i = 1; i < ht->capacity; i++){
        if(ht->buckets[i]->count != 0){
            flag = 1;
            break;
        }
    }
    REQUIRE(flag == 1);
}

TEST_CASE("Test2", "hash2")
{
    hashtable *ht = ht_init(100);
    int result = readFile(ht, "stations.csv");
    //ht_print_bucket_sizes(ht);
    INFO("Testing if the file can be opened.");
    REQUIRE(result != 1);
    INFO("File can be opened. Your hash function could be improved. We found too many extreme vaules for single bucket sizes.");
    int max_vaule_allowed = 100;
    int min_value_allowed = 10;
    for(int i = 0; i < ht->capacity; i++){
        REQUIRE(ht->buckets[i]->count <= max_vaule_allowed);
        REQUIRE(ht->buckets[i]->count >= min_value_allowed);
    }
}

TEST_CASE("Test3", "hash3")
{
    hashtable *ht = ht_init(100);
    int result = readFile(ht, "stations.csv");
    //ht_print_bucket_sizes(ht);
    INFO("Testing if the file can be opened.");
    REQUIRE(result != 1);
    INFO("File can be opened. Your hash function could still be improved. We found too many extreme vaules for an 'excellent' implementation.");
    int max_vaule_allowed = 71;
    int min_value_allowed = 36;
    for(int i = 0; i < ht->capacity; i++){
        REQUIRE(ht->buckets[i]->count <= max_vaule_allowed);
        REQUIRE(ht->buckets[i]->count >= min_value_allowed);
    }
}

TEST_CASE("Test4", "put1")
{
    hashtable *ht = ht_init(100);
    int result = readFile(ht, "stations.csv");
    INFO("Testing if the file can be opened.");
    REQUIRE(result != 1);
    INFO("File can be opened. Testing of the put function fails.");
    int hash = ht_hash(ht, (char*)"LOWW");
    element *tmp = l_find(ht->buckets[hash], (char*)"LOWW");
    REQUIRE(tmp != nullptr);
}

TEST_CASE("Test5", "put2")
{
    hashtable *ht = ht_init(100);
    int result = readFile(ht, "stations.csv");
    INFO("Testing if the file can be opened.");
    REQUIRE(result != 1);
    INFO("File can be opened. Testing of the put function fails.");
    int hash = ht_hash(ht, (char*)"LOWW");
    element *tmp = l_find(ht->buckets[hash], (char*)"LOWW");
    REQUIRE(tmp != nullptr);
    INFO("Basic put OK. Testing the put function's delete capability fails.");
    ht_put(ht, (char*)"LOWW",nullptr);
    tmp = l_find(ht->buckets[hash], (char*)"LOWW");
    REQUIRE(tmp == nullptr);
}

TEST_CASE("Test6", "put3")
{
    hashtable *ht = ht_init(100);
    int result = readFile(ht, "stations.csv");
    INFO("Testing if the file can be opened.");
    REQUIRE(result != 1);
    INFO("File can be opened. Testing of the put function fails.");
    int hash = ht_hash(ht, (char*)"LOWW");
    element *tmp = l_find(ht->buckets[hash], (char*)"LOWW");
    REQUIRE(tmp != nullptr);
    INFO("Basic put OK. Testing the put function's update capability fails.");
    ht_put(ht, (char*)"LOWW",(char*)"Vienna Airport");
    tmp = l_find(ht->buckets[hash], (char*)"LOWW");
    REQUIRE(strcmp(tmp->station_name, "Vienna Airport") == 0);
    REQUIRE(hasDuplicatesInList(ht, (char*)"LOWW") == 0);
}

TEST_CASE("Test7", "get")
{
    hashtable *ht = ht_init(100);
    int result = readFile(ht, "stations.csv");
    INFO("Testing if the file can be opened.");
    REQUIRE(result != 1);
    INFO("File can be opened. Testing of the get function fails. Looking for an existing key.");
    char *tmp = ht_get(ht, (char*)"LOWW");
    REQUIRE(tmp != nullptr);
    REQUIRE(strcmp(tmp, "Wien / Schwechat-Flughafen") == 0);
}

TEST_CASE("Test8", "get2")
{
    hashtable *ht = ht_init(100);
    int result = readFile(ht, "stations.csv");
    INFO("Testing if the file can be opened.");
    REQUIRE(result != 1);
    INFO("File can be opened. Testing of the get function fails. Looking for an invalid key.");
    char *tmp = ht_get(ht, (char*)"LOWY");
    REQUIRE(tmp == nullptr);
}
