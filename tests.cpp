// Test definitions. Do NOT edit this file!

#include <tuple>

//#define CATCH_CONFIG_MAIN // defines main() automatically
#include "lib/catch.hpp"
#include "list.hpp"
#include <string.h>
#include <stdio.h>


// =====================
// List Testcases
// ---------------------

TEST_CASE("Test1", "init")
{
    list *list = l_init();
    INFO("Test Case for l_init: pointer may not be NULL. All variables of the struct need to be initialized.");
    REQUIRE(list != nullptr);
    REQUIRE(list->count == 0);
    REQUIRE(list->head == nullptr);
}

TEST_CASE("Test2", "insert")
{
    list *list = l_init();
    INFO("Test Case for l_insert.");
    REQUIRE(list != nullptr);
    l_insert(list, (char*)"wonderland");
    l_insert(list, (char*)"rabbit");
    l_insert(list, (char*)"queen of hearts");
    REQUIRE(list->head != nullptr);
    REQUIRE(list->count == 3);
}

TEST_CASE("Test3", "delete")
{
    list *list = l_init();
    INFO("Test Case for l_delete.");
    REQUIRE(list != nullptr);
    l_insert(list, (char*)"wonderland");
    l_insert(list, (char*)"rabbit");
    l_insert(list, (char*)"queen of hearts");
    l_delete(list, (char*)"queen of hearts");
    REQUIRE(list->head != nullptr);
    REQUIRE(list->count == 2);
    REQUIRE(strcmp(list->head->word, "rabbit") == 0);
}

TEST_CASE("Test4", "find")
{
    list *list = l_init();
    element *tmp;
    INFO("Test Case for l_find.");
    REQUIRE(list != nullptr);
    l_insert(list, (char*)"wonderland");
    l_insert(list, (char*)"rabbit");
    l_insert(list, (char*)"queen of hearts");
    tmp = l_find(list, (char*)"queen of hearts");
    REQUIRE(list->head != nullptr);
    REQUIRE(list->count == 3);
    REQUIRE(tmp != nullptr);
    REQUIRE(strcmp(tmp->word, "queen of hearts") == 0);
}

TEST_CASE("Test5", "readFile")
{
    list* list = l_init();
    element *tmp;
    INFO("Test Case for readFile.");
    REQUIRE(list != nullptr);
    
    if(!readFile(list, (char*)"alice.txt")){
        tmp = l_find(list, (char*)"project");
        REQUIRE(tmp != nullptr);
        REQUIRE((tmp->count >= 79 && tmp->count <= 83));
    }
}

TEST_CASE("Test6", "frequencyCount")
{
    list* list = l_init();
    int frequencies[26] = {0};
    INFO("Test Case for frequencyCount.");
    REQUIRE(list != nullptr);
    
    if(!readFile(list, (char*)"alice.txt")){
        frequencyCount(list, frequencies);
        /* for debugging purposes
        for(int i=0; i < 26; i++){
            printf("%c: %i\n", i+97, frequencies[i]);
        }
        */
        REQUIRE(frequencies[0] >= 9400);
        REQUIRE(frequencies[1] >= 1650);
        REQUIRE(frequencies[25] >= 78);
    }
}

TEST_CASE("Test7", "letterCount")
{
    list* list = l_init();
    int total = 0;
    INFO("Test Case for letterCount.");
    REQUIRE(list != nullptr);
    
    if(!readFile(list, (char*)"alice.txt")){
        total = letterCount(list);
        REQUIRE(total >= 117420);
    }
}

TEST_CASE("Test8", "wordCount")
{
    list* list = l_init();
    int total = 0;
    INFO("Test Case for wordCount.");
    REQUIRE(list != nullptr);
    
    if(!readFile(list, (char*)"alice.txt")){
        total = wordCount(list);
        REQUIRE(total >= 28059);
    }
}

TEST_CASE("Test9", "deleteWords")
{
    list* list = l_init();
    element *tmp = nullptr;
    INFO("Test Case for deleteWords with a frequency less than 100.");
    REQUIRE(list != nullptr);
    
    if(!readFile(list, (char*)"alice.txt")){
        deleteWords(list, 100);
        REQUIRE(list->count < 50);
        REQUIRE(list->count > 1);
        tmp = l_find(list, (char*)"wondered");
        REQUIRE(tmp == nullptr);
    }
}

